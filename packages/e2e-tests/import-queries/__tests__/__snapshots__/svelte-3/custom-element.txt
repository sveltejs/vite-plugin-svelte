/* src/Dummy.svelte generated by Svelte vXXX */
import {
	SvelteElement as SvelteElement$,
	append as append$,
	attribute_to_object as attribute_to_object$,
	detach as detach$,
	element as element$,
	flush as flush$,
	init as init$,
	insert as insert$,
	listen as listen$,
	noop as noop$,
	safe_not_equal as safe_not_equal$,
	set_data as set_data$,
	text as text$
} from "svelte/internal";

function create_fragment(ctx) {
	let button$;
	let t0$;
	let t1$;
	let t2$;
	let mounted;
	let dispose;

	return {
		c() {
			button$ = element$("button");
			t0$ = text$(/*name*/ ctx[0]);
			t1$ = text$(" clicks: ");
			t2$ = text$(/*clicks*/ ctx[1]);
			this.c = noop$;
		},
		m(target, anchor) {
			insert$(target, button$, anchor);
			append$(button$, t0$);
			append$(button$, t1$);
			append$(button$, t2$);

			if (!mounted) {
				dispose = listen$(button$, "click", /*click_handler$*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data$(t0$, /*name*/ ctx[0]);
			if (dirty & /*clicks*/ 2) set_data$(t2$, /*clicks*/ ctx[1]);
		},
		i: noop$,
		o: noop$,
		d(detaching) {
			if (detaching) detach$(button$);
			mounted = false;
			dispose();
		}
	};
}

function instance$($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let clicks = 0;

	const click_handler$ = () => {
		$$invalidate(1, clicks++, clicks);
	};

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, clicks, click_handler$];
}

class Dummy$ extends SvelteElement$ {
	constructor(options) {
		super();
		const style = document.createElement('style');
		style.textContent = `button{color:#000099}`;
		this.shadowRoot.appendChild(style);

		init$(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object$(this.attributes),
				customElement: true
			},
			instance$,
			create_fragment,
			safe_not_equal$,
			{ name: 0 },
			null
		);

		if (options) {
			if (options.target) {
				insert$(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush$();
			}
		}
	}

	static get observedAttributes() {
		return ["name"];
	}

	get name() {
		return this.$$.ctx[0];
	}

	set name(name) {
		this.$$set({ name });
		flush$();
	}
}

export default Dummy$;