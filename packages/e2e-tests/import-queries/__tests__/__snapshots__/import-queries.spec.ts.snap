// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`direct > Dummy.svelte?direct&svelte&type=script&sourcemap&lang.js 1`] = `
"/* src/Dummy.svelte generated by Svelte vXXX */
import {
	SvelteComponent as SvelteComponent$,
	append as append$,
	attr as attr$,
	detach as detach$,
	element as element$,
	init as init$,
	insert as insert$,
	listen as listen$,
	noop as noop$,
	safe_not_equal as safe_not_equal$,
	set_data as set_data$,
	text as text$
} from \\"/node_modules/.vite/deps/svelte_internal.js?v=XXX\\";

function create_fragment(ctx) {
	let button$;
	let t0$;
	let t1$;
	let t2$;
	let mounted;
	let dispose;

	return {
		c() {
			button$ = element$(\\"button\\");
			t0$ = text$(/*name*/ ctx[0]);
			t1$ = text$(\\" clicks: \\");
			t2$ = text$(/*clicks*/ ctx[1]);
			attr$(button$, \\"class\\", \\"svelte-d8vj6a\\");
		},
		m(target, anchor) {
			insert$(target, button$, anchor);
			append$(button$, t0$);
			append$(button$, t1$);
			append$(button$, t2$);

			if (!mounted) {
				dispose = listen$(button$, \\"click\\", /*click_handler$*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data$(t0$, /*name*/ ctx[0]);
			if (dirty & /*clicks*/ 2) set_data$(t2$, /*clicks*/ ctx[1]);
		},
		i: noop$,
		o: noop$,
		d(detaching) {
			if (detaching) detach$(button$);
			mounted = false;
			dispose();
		}
	};
}

function instance$($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let clicks = 0;

	const click_handler$ = () => {
		$$invalidate(1, clicks++, clicks);
	};

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, clicks, click_handler$];
}

class Dummy$ extends SvelteComponent$ {
	constructor(options) {
		super();
		init$(this, options, instance$, create_fragment, safe_not_equal$, { name: 0 });
	}
}

export default Dummy$;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQVFLLEdBQUk7ZUFBQyxXQUFTOzBCQUFDLEdBQU07Ozs7R0FIMUIsT0FJQTs7Ozs7Ozs7Ozs7bURBREssR0FBSTt1REFBVyxHQUFNOzs7Ozs7Ozs7Ozs7O09BUGQsSUFBQTtLQUNQLE1BQUEsR0FBUyxDQUFBOzs7a0JBS1osTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkR1bW15LnN2ZWx0ZSJdfQ==
"
`;

exports[`direct > Dummy.svelte?direct&svelte&type=style&sourcemap&lang.css 1`] = `
"button.svelte-d8vj6a{color:#000099}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHVtbXkuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQVdrQixvQkFBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEdW1teS5zdmVsdGUiXX0= */
"
`;

exports[`raw > Dummy.svelte?raw 1`] = `
"<script lang=\\"ts\\">
	export let name: string;
	let clicks = 0;
</script>

<button
	on:click={() => {
		clicks++;
	}}>{name} clicks: {clicks}</button
>

<style lang=\\"scss\\">
	$blue: blue;
	button {
		color: darken($blue, 20);
	}
</style>
"
`;

exports[`raw > Dummy.svelte?raw&svelte&type=all&sourcemap 1`] = `
"{
  \\"ast\\": {
    \\"html\\": {
      \\"start\\": 62,
      \\"end\\": 138,
      \\"type\\": \\"Fragment\\",
      \\"children\\": [
        {
          \\"start\\": 60,
          \\"end\\": 62,
          \\"type\\": \\"Text\\",
          \\"raw\\": \\"\\\\n\\\\n\\",
          \\"data\\": \\"\\\\n\\\\n\\"
        },
        {
          \\"start\\": 62,
          \\"end\\": 138,
          \\"type\\": \\"Element\\",
          \\"name\\": \\"button\\",
          \\"attributes\\": [
            {
              \\"start\\": 71,
              \\"end\\": 104,
              \\"type\\": \\"EventHandler\\",
              \\"name\\": \\"click\\",
              \\"modifiers\\": [],
              \\"expression\\": {
                \\"type\\": \\"ArrowFunctionExpression\\",
                \\"start\\": 81,
                \\"end\\": 103,
                \\"loc\\": {
                  \\"start\\": {
                    \\"line\\": 6,
                    \\"column\\": 11
                  },
                  \\"end\\": {
                    \\"line\\": 8,
                    \\"column\\": 2
                  }
                },
                \\"id\\": null,
                \\"expression\\": false,
                \\"generator\\": false,
                \\"async\\": false,
                \\"params\\": [],
                \\"body\\": {
                  \\"type\\": \\"BlockStatement\\",
                  \\"start\\": 87,
                  \\"end\\": 103,
                  \\"loc\\": {
                    \\"start\\": {
                      \\"line\\": 6,
                      \\"column\\": 17
                    },
                    \\"end\\": {
                      \\"line\\": 8,
                      \\"column\\": 2
                    }
                  },
                  \\"body\\": [
                    {
                      \\"type\\": \\"ExpressionStatement\\",
                      \\"start\\": 91,
                      \\"end\\": 100,
                      \\"loc\\": {
                        \\"start\\": {
                          \\"line\\": 7,
                          \\"column\\": 2
                        },
                        \\"end\\": {
                          \\"line\\": 7,
                          \\"column\\": 11
                        }
                      },
                      \\"expression\\": {
                        \\"type\\": \\"UpdateExpression\\",
                        \\"start\\": 91,
                        \\"end\\": 99,
                        \\"loc\\": {
                          \\"start\\": {
                            \\"line\\": 7,
                            \\"column\\": 2
                          },
                          \\"end\\": {
                            \\"line\\": 7,
                            \\"column\\": 10
                          }
                        },
                        \\"operator\\": \\"++\\",
                        \\"prefix\\": false,
                        \\"argument\\": {
                          \\"type\\": \\"Identifier\\",
                          \\"start\\": 91,
                          \\"end\\": 97,
                          \\"loc\\": {
                            \\"start\\": {
                              \\"line\\": 7,
                              \\"column\\": 2
                            },
                            \\"end\\": {
                              \\"line\\": 7,
                              \\"column\\": 8
                            }
                          },
                          \\"name\\": \\"clicks\\"
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          \\"children\\": [
            {
              \\"start\\": 105,
              \\"end\\": 111,
              \\"type\\": \\"MustacheTag\\",
              \\"expression\\": {
                \\"type\\": \\"Identifier\\",
                \\"start\\": 106,
                \\"end\\": 110,
                \\"loc\\": {
                  \\"start\\": {
                    \\"line\\": 8,
                    \\"column\\": 5
                  },
                  \\"end\\": {
                    \\"line\\": 8,
                    \\"column\\": 9
                  }
                },
                \\"name\\": \\"name\\"
              }
            },
            {
              \\"start\\": 111,
              \\"end\\": 120,
              \\"type\\": \\"Text\\",
              \\"raw\\": \\" clicks: \\",
              \\"data\\": \\" clicks: \\"
            },
            {
              \\"start\\": 120,
              \\"end\\": 128,
              \\"type\\": \\"MustacheTag\\",
              \\"expression\\": {
                \\"type\\": \\"Identifier\\",
                \\"start\\": 121,
                \\"end\\": 127,
                \\"loc\\": {
                  \\"start\\": {
                    \\"line\\": 8,
                    \\"column\\": 20
                  },
                  \\"end\\": {
                    \\"line\\": 8,
                    \\"column\\": 26
                  }
                },
                \\"name\\": \\"clicks\\"
              }
            }
          ]
        },
        {
          \\"start\\": 138,
          \\"end\\": 140,
          \\"type\\": \\"Text\\",
          \\"raw\\": \\"\\\\n\\\\n\\",
          \\"data\\": \\"\\\\n\\\\n\\"
        }
      ]
    },
    \\"css\\": {
      \\"type\\": \\"Style\\",
      \\"start\\": 140,
      \\"end\\": 195,
      \\"attributes\\": [
        {
          \\"start\\": 147,
          \\"end\\": 158,
          \\"type\\": \\"Attribute\\",
          \\"name\\": \\"lang\\",
          \\"value\\": [
            {
              \\"start\\": 153,
              \\"end\\": 157,
              \\"type\\": \\"Text\\",
              \\"raw\\": \\"scss\\",
              \\"data\\": \\"scss\\"
            }
          ]
        }
      ],
      \\"children\\": [
        {
          \\"type\\": \\"Rule\\",
          \\"prelude\\": {
            \\"type\\": \\"SelectorList\\",
            \\"children\\": [
              {
                \\"type\\": \\"Selector\\",
                \\"children\\": [
                  {
                    \\"type\\": \\"TypeSelector\\",
                    \\"name\\": \\"button\\",
                    \\"start\\": 159,
                    \\"end\\": 165
                  }
                ],
                \\"start\\": 159,
                \\"end\\": 165
              }
            ],
            \\"start\\": 159,
            \\"end\\": 165
          },
          \\"block\\": {
            \\"type\\": \\"Block\\",
            \\"children\\": [
              {
                \\"type\\": \\"Declaration\\",
                \\"important\\": false,
                \\"property\\": \\"color\\",
                \\"value\\": {
                  \\"type\\": \\"Value\\",
                  \\"children\\": [
                    {
                      \\"type\\": \\"Hash\\",
                      \\"value\\": \\"000099\\",
                      \\"start\\": 177,
                      \\"end\\": 184
                    }
                  ],
                  \\"start\\": 177,
                  \\"end\\": 184
                },
                \\"start\\": 170,
                \\"end\\": 184
              }
            ],
            \\"start\\": 166,
            \\"end\\": 187
          },
          \\"start\\": 159,
          \\"end\\": 187
        }
      ],
      \\"content\\": {
        \\"start\\": 159,
        \\"end\\": 187,
        \\"styles\\": \\"button {\\\\n  color: #000099;\\\\n}\\"
      }
    },
    \\"instance\\": {
      \\"type\\": \\"Script\\",
      \\"start\\": 0,
      \\"end\\": 60,
      \\"context\\": \\"default\\",
      \\"content\\": {
        \\"type\\": \\"Program\\",
        \\"start\\": 18,
        \\"end\\": 51,
        \\"loc\\": {
          \\"start\\": {
            \\"line\\": 1,
            \\"column\\": 0
          },
          \\"end\\": {
            \\"line\\": 3,
            \\"column\\": 0
          }
        },
        \\"body\\": [
          {
            \\"type\\": \\"ExportNamedDeclaration\\",
            \\"start\\": 18,
            \\"end\\": 34,
            \\"loc\\": {
              \\"start\\": {
                \\"line\\": 1,
                \\"column\\": 18
              },
              \\"end\\": {
                \\"line\\": 1,
                \\"column\\": 34
              }
            },
            \\"declaration\\": {
              \\"type\\": \\"VariableDeclaration\\",
              \\"start\\": 25,
              \\"end\\": 34,
              \\"loc\\": {
                \\"start\\": {
                  \\"line\\": 1,
                  \\"column\\": 25
                },
                \\"end\\": {
                  \\"line\\": 1,
                  \\"column\\": 34
                }
              },
              \\"declarations\\": [
                {
                  \\"type\\": \\"VariableDeclarator\\",
                  \\"start\\": 29,
                  \\"end\\": 33,
                  \\"loc\\": {
                    \\"start\\": {
                      \\"line\\": 1,
                      \\"column\\": 29
                    },
                    \\"end\\": {
                      \\"line\\": 1,
                      \\"column\\": 33
                    }
                  },
                  \\"id\\": {
                    \\"type\\": \\"Identifier\\",
                    \\"start\\": 29,
                    \\"end\\": 33,
                    \\"loc\\": {
                      \\"start\\": {
                        \\"line\\": 1,
                        \\"column\\": 29
                      },
                      \\"end\\": {
                        \\"line\\": 1,
                        \\"column\\": 33
                      }
                    },
                    \\"name\\": \\"name\\"
                  },
                  \\"init\\": null
                }
              ],
              \\"kind\\": \\"let\\"
            },
            \\"specifiers\\": [],
            \\"source\\": null
          },
          {
            \\"type\\": \\"VariableDeclaration\\",
            \\"start\\": 35,
            \\"end\\": 50,
            \\"loc\\": {
              \\"start\\": {
                \\"line\\": 2,
                \\"column\\": 0
              },
              \\"end\\": {
                \\"line\\": 2,
                \\"column\\": 15
              }
            },
            \\"declarations\\": [
              {
                \\"type\\": \\"VariableDeclarator\\",
                \\"start\\": 39,
                \\"end\\": 49,
                \\"loc\\": {
                  \\"start\\": {
                    \\"line\\": 2,
                    \\"column\\": 4
                  },
                  \\"end\\": {
                    \\"line\\": 2,
                    \\"column\\": 14
                  }
                },
                \\"id\\": {
                  \\"type\\": \\"Identifier\\",
                  \\"start\\": 39,
                  \\"end\\": 45,
                  \\"loc\\": {
                    \\"start\\": {
                      \\"line\\": 2,
                      \\"column\\": 4
                    },
                    \\"end\\": {
                      \\"line\\": 2,
                      \\"column\\": 10
                    }
                  },
                  \\"name\\": \\"clicks\\"
                },
                \\"init\\": {
                  \\"type\\": \\"Literal\\",
                  \\"start\\": 48,
                  \\"end\\": 49,
                  \\"loc\\": {
                    \\"start\\": {
                      \\"line\\": 2,
                      \\"column\\": 13
                    },
                    \\"end\\": {
                      \\"line\\": 2,
                      \\"column\\": 14
                    }
                  },
                  \\"value\\": 0,
                  \\"raw\\": \\"0\\"
                }
              }
            ],
            \\"kind\\": \\"let\\"
          }
        ],
        \\"sourceType\\": \\"module\\"
      }
    }
  },
  \\"css\\": {
    \\"code\\": \\"button.svelte-d8vj6a{color:#000099}\\",
    \\"map\\": {
      \\"version\\": 3,
      \\"file\\": \\"Dummy.svelte\\",
      \\"mappings\\": \\"AAWkB,oBAAA\\",
      \\"names\\": [],
      \\"sources\\": [
        \\"Dummy.svelte\\"
      ]
    }
  },
  \\"dependencies\\": [],
  \\"js\\": {
    \\"code\\": \\"/* src/Dummy.svelte generated by Svelte vXXX */\\\\nimport {\\\\n\\\\tSvelteComponent as SvelteComponent$,\\\\n\\\\tappend as append$,\\\\n\\\\tattr as attr$,\\\\n\\\\tdetach as detach$,\\\\n\\\\telement as element$,\\\\n\\\\tinit as init$,\\\\n\\\\tinsert as insert$,\\\\n\\\\tlisten as listen$,\\\\n\\\\tnoop as noop$,\\\\n\\\\tsafe_not_equal as safe_not_equal$,\\\\n\\\\tset_data as set_data$,\\\\n\\\\ttext as text$\\\\n} from \\\\\\"svelte/internal\\\\\\";\\\\n\\\\nfunction create_fragment(ctx) {\\\\n\\\\tlet button$;\\\\n\\\\tlet t0$;\\\\n\\\\tlet t1$;\\\\n\\\\tlet t2$;\\\\n\\\\tlet mounted;\\\\n\\\\tlet dispose;\\\\n\\\\n\\\\treturn {\\\\n\\\\t\\\\tc() {\\\\n\\\\t\\\\t\\\\tbutton$ = element$(\\\\\\"button\\\\\\");\\\\n\\\\t\\\\t\\\\tt0$ = text$(/*name*/ ctx[0]);\\\\n\\\\t\\\\t\\\\tt1$ = text$(\\\\\\" clicks: \\\\\\");\\\\n\\\\t\\\\t\\\\tt2$ = text$(/*clicks*/ ctx[1]);\\\\n\\\\t\\\\t\\\\tattr$(button$, \\\\\\"class\\\\\\", \\\\\\"svelte-d8vj6a\\\\\\");\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\tm(target, anchor) {\\\\n\\\\t\\\\t\\\\tinsert$(target, button$, anchor);\\\\n\\\\t\\\\t\\\\tappend$(button$, t0$);\\\\n\\\\t\\\\t\\\\tappend$(button$, t1$);\\\\n\\\\t\\\\t\\\\tappend$(button$, t2$);\\\\n\\\\n\\\\t\\\\t\\\\tif (!mounted) {\\\\n\\\\t\\\\t\\\\t\\\\tdispose = listen$(button$, \\\\\\"click\\\\\\", /*click_handler$*/ ctx[2]);\\\\n\\\\t\\\\t\\\\t\\\\tmounted = true;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\tp(ctx, [dirty]) {\\\\n\\\\t\\\\t\\\\tif (dirty & /*name*/ 1) set_data$(t0$, /*name*/ ctx[0]);\\\\n\\\\t\\\\t\\\\tif (dirty & /*clicks*/ 2) set_data$(t2$, /*clicks*/ ctx[1]);\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\ti: noop$,\\\\n\\\\t\\\\to: noop$,\\\\n\\\\t\\\\td(detaching) {\\\\n\\\\t\\\\t\\\\tif (detaching) detach$(button$);\\\\n\\\\t\\\\t\\\\tmounted = false;\\\\n\\\\t\\\\t\\\\tdispose();\\\\n\\\\t\\\\t}\\\\n\\\\t};\\\\n}\\\\n\\\\nfunction instance$($$self, $$props, $$invalidate) {\\\\n\\\\tlet { name } = $$props;\\\\n\\\\tlet clicks = 0;\\\\n\\\\n\\\\tconst click_handler$ = () => {\\\\n\\\\t\\\\t$$invalidate(1, clicks++, clicks);\\\\n\\\\t};\\\\n\\\\n\\\\t$$self.$$set = $$props => {\\\\n\\\\t\\\\tif ('name' in $$props) $$invalidate(0, name = $$props.name);\\\\n\\\\t};\\\\n\\\\n\\\\treturn [name, clicks, click_handler$];\\\\n}\\\\n\\\\nclass Dummy$ extends SvelteComponent$ {\\\\n\\\\tconstructor(options) {\\\\n\\\\t\\\\tsuper();\\\\n\\\\t\\\\tinit$(this, options, instance$, create_fragment, safe_not_equal$, { name: 0 });\\\\n\\\\t}\\\\n}\\\\n\\\\nexport default Dummy$;\\",
    \\"map\\": {
      \\"version\\": 3,
      \\"mappings\\": \\";;;;;;;;;;;;;;;;;;;;;;;;;;;wBAQK,GAAI;eAAC,WAAS;0BAAC,GAAM;;;;GAH1B,OAIA;;;;;;;;;;;mDADK,GAAI;uDAAW,GAAM;;;;;;;;;;;;;OAPd,IAAA;KACP,MAAA,GAAS,CAAA;;;kBAKZ,MAAM;;;;;;;;;;;;;;;;;\\",
      \\"names\\": [],
      \\"sources\\": [
        \\"Dummy.svelte\\"
      ]
    }
  },
  \\"lang\\": \\"ts\\",
  \\"normalizedFilename\\": \\"/src/Dummy.svelte\\",
  \\"preprocessed\\": {
    \\"code\\": \\"<script lang=\\\\\\"ts\\\\\\">export let name;\\\\nlet clicks = 0;\\\\n</script>\\\\n\\\\n<button\\\\n\\\\ton:click={() => {\\\\n\\\\t\\\\tclicks++;\\\\n\\\\t}}>{name} clicks: {clicks}</button\\\\n>\\\\n\\\\n<style lang=\\\\\\"scss\\\\\\">button {\\\\n  color: #000099;\\\\n}</style>\\\\n\\",
    \\"dependencies\\": [],
    \\"map\\": {
      \\"version\\": 3,
      \\"mappings\\": \\"AAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CACT,MAAA,CAAA,GAAA,CAAI,IAAA;AACX,GAAA,CAAI,MAAA,CAAA,CAAA,CAAS,CAAA;AACd,CAAC,CAAC,MAAM;;AAER,CAAC;AACD,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,MAAM,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AAC7B;;AAEA,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;;CAKlB,CAAC,CAAC,KAAK;\\",
      \\"names\\": [],
      \\"sources\\": [
        \\"Dummy.svelte\\"
      ]
    }
  },
  \\"source\\": \\"<script lang=\\\\\\"ts\\\\\\">\\\\n\\\\texport let name: string;\\\\n\\\\tlet clicks = 0;\\\\n</script>\\\\n\\\\n<button\\\\n\\\\ton:click={() => {\\\\n\\\\t\\\\tclicks++;\\\\n\\\\t}}>{name} clicks: {clicks}</button\\\\n>\\\\n\\\\n<style lang=\\\\\\"scss\\\\\\">\\\\n\\\\t$blue: blue;\\\\n\\\\tbutton {\\\\n\\\\t\\\\tcolor: darken($blue, 20);\\\\n\\\\t}\\\\n</style>\\\\n\\",
  \\"ssr\\": false,
  \\"stats\\": {
    \\"timings\\": {
      \\"total\\":0.123456789,
      \\"parse\\": {
        \\"total\\":0.123456789
      },
      \\"create component\\": {
        \\"total\\":0.123456789
      }
    }
  },
  \\"vars\\": [
    {
      \\"name\\": \\"name\\",
      \\"export_name\\": \\"name\\",
      \\"injected\\": false,
      \\"module\\": false,
      \\"mutated\\": false,
      \\"reassigned\\": false,
      \\"referenced\\": true,
      \\"writable\\": true,
      \\"referenced_from_script\\": false
    },
    {
      \\"name\\": \\"clicks\\",
      \\"export_name\\": null,
      \\"injected\\": false,
      \\"module\\": false,
      \\"mutated\\": false,
      \\"reassigned\\": true,
      \\"referenced\\": true,
      \\"writable\\": true,
      \\"referenced_from_script\\": false
    }
  ],
  \\"warnings\\": []
}"
`;

exports[`raw > Dummy.svelte?raw&svelte&type=preprocessed 1`] = `
"<script lang=\\"ts\\">export let name;
let clicks = 0;
</script>

<button
	on:click={() => {
		clicks++;
	}}>{name} clicks: {clicks}</button
>

<style lang=\\"scss\\">button {
  color: #000099;
}</style>
"
`;

exports[`raw > Dummy.svelte?raw&svelte&type=script 1`] = `
"/* src/Dummy.svelte generated by Svelte vXXX */
import {
	SvelteComponent as SvelteComponent$,
	append as append$,
	attr as attr$,
	detach as detach$,
	element as element$,
	init as init$,
	insert as insert$,
	listen as listen$,
	noop as noop$,
	safe_not_equal as safe_not_equal$,
	set_data as set_data$,
	text as text$
} from \\"svelte/internal\\";

function create_fragment(ctx) {
	let button$;
	let t0$;
	let t1$;
	let t2$;
	let mounted;
	let dispose;

	return {
		c() {
			button$ = element$(\\"button\\");
			t0$ = text$(/*name*/ ctx[0]);
			t1$ = text$(\\" clicks: \\");
			t2$ = text$(/*clicks*/ ctx[1]);
			attr$(button$, \\"class\\", \\"svelte-d8vj6a\\");
		},
		m(target, anchor) {
			insert$(target, button$, anchor);
			append$(button$, t0$);
			append$(button$, t1$);
			append$(button$, t2$);

			if (!mounted) {
				dispose = listen$(button$, \\"click\\", /*click_handler$*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data$(t0$, /*name*/ ctx[0]);
			if (dirty & /*clicks*/ 2) set_data$(t2$, /*clicks*/ ctx[1]);
		},
		i: noop$,
		o: noop$,
		d(detaching) {
			if (detaching) detach$(button$);
			mounted = false;
			dispose();
		}
	};
}

function instance$($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let clicks = 0;

	const click_handler$ = () => {
		$$invalidate(1, clicks++, clicks);
	};

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, clicks, click_handler$];
}

class Dummy$ extends SvelteComponent$ {
	constructor(options) {
		super();
		init$(this, options, instance$, create_fragment, safe_not_equal$, { name: 0 });
	}
}

export default Dummy$;"
`;

exports[`raw > Dummy.svelte?raw&svelte&type=script&compilerOptions={"customElement":true} 1`] = `
"/* src/Dummy.svelte generated by Svelte vXXX */
import {
	SvelteElement as SvelteElement$,
	append as append$,
	attribute_to_object as attribute_to_object$,
	detach as detach$,
	element as element$,
	flush as flush$,
	init as init$,
	insert as insert$,
	listen as listen$,
	noop as noop$,
	safe_not_equal as safe_not_equal$,
	set_data as set_data$,
	text as text$
} from \\"svelte/internal\\";

function create_fragment(ctx) {
	let button$;
	let t0$;
	let t1$;
	let t2$;
	let mounted;
	let dispose;

	return {
		c() {
			button$ = element$(\\"button\\");
			t0$ = text$(/*name*/ ctx[0]);
			t1$ = text$(\\" clicks: \\");
			t2$ = text$(/*clicks*/ ctx[1]);
			this.c = noop$;
		},
		m(target, anchor) {
			insert$(target, button$, anchor);
			append$(button$, t0$);
			append$(button$, t1$);
			append$(button$, t2$);

			if (!mounted) {
				dispose = listen$(button$, \\"click\\", /*click_handler$*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data$(t0$, /*name*/ ctx[0]);
			if (dirty & /*clicks*/ 2) set_data$(t2$, /*clicks*/ ctx[1]);
		},
		i: noop$,
		o: noop$,
		d(detaching) {
			if (detaching) detach$(button$);
			mounted = false;
			dispose();
		}
	};
}

function instance$($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let clicks = 0;

	const click_handler$ = () => {
		$$invalidate(1, clicks++, clicks);
	};

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, clicks, click_handler$];
}

class Dummy$ extends SvelteElement$ {
	constructor(options) {
		super();
		const style = document.createElement('style');
		style.textContent = \`button{color:#000099}\`;
		this.shadowRoot.appendChild(style);

		init$(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object$(this.attributes),
				customElement: true
			},
			instance$,
			create_fragment,
			safe_not_equal$,
			{ name: 0 },
			null
		);

		if (options) {
			if (options.target) {
				insert$(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush$();
			}
		}
	}

	static get observedAttributes() {
		return [\\"name\\"];
	}

	get name() {
		return this.$$.ctx[0];
	}

	set name(name) {
		this.$$set({ name });
		flush$();
	}
}

export default Dummy$;"
`;

exports[`raw > Dummy.svelte?raw&svelte&type=style 1`] = `"button.svelte-d8vj6a{color:#000099}"`;

exports[`raw > mixed exports > Dummy.svelte?raw&svelte&type=all 1`] = `
"export const ast={\\"html\\":{\\"start\\":62,\\"end\\":138,\\"type\\":\\"Fragment\\",\\"children\\":[{\\"start\\":60,\\"end\\":62,\\"type\\":\\"Text\\",\\"raw\\":\\"\\\\n\\\\n\\",\\"data\\":\\"\\\\n\\\\n\\"},{\\"start\\":62,\\"end\\":138,\\"type\\":\\"Element\\",\\"name\\":\\"button\\",\\"attributes\\":[{\\"start\\":71,\\"end\\":104,\\"type\\":\\"EventHandler\\",\\"name\\":\\"click\\",\\"modifiers\\":[],\\"expression\\":{\\"type\\":\\"ArrowFunctionExpression\\",\\"start\\":81,\\"end\\":103,\\"loc\\":{\\"start\\":{\\"line\\":6,\\"column\\":11},\\"end\\":{\\"line\\":8,\\"column\\":2}},\\"id\\":null,\\"expression\\":false,\\"generator\\":false,\\"async\\":false,\\"params\\":[],\\"body\\":{\\"type\\":\\"BlockStatement\\",\\"start\\":87,\\"end\\":103,\\"loc\\":{\\"start\\":{\\"line\\":6,\\"column\\":17},\\"end\\":{\\"line\\":8,\\"column\\":2}},\\"body\\":[{\\"type\\":\\"ExpressionStatement\\",\\"start\\":91,\\"end\\":100,\\"loc\\":{\\"start\\":{\\"line\\":7,\\"column\\":2},\\"end\\":{\\"line\\":7,\\"column\\":11}},\\"expression\\":{\\"type\\":\\"UpdateExpression\\",\\"start\\":91,\\"end\\":99,\\"loc\\":{\\"start\\":{\\"line\\":7,\\"column\\":2},\\"end\\":{\\"line\\":7,\\"column\\":10}},\\"operator\\":\\"++\\",\\"prefix\\":false,\\"argument\\":{\\"type\\":\\"Identifier\\",\\"start\\":91,\\"end\\":97,\\"loc\\":{\\"start\\":{\\"line\\":7,\\"column\\":2},\\"end\\":{\\"line\\":7,\\"column\\":8}},\\"name\\":\\"clicks\\"}}}]}}}],\\"children\\":[{\\"start\\":105,\\"end\\":111,\\"type\\":\\"MustacheTag\\",\\"expression\\":{\\"type\\":\\"Identifier\\",\\"start\\":106,\\"end\\":110,\\"loc\\":{\\"start\\":{\\"line\\":8,\\"column\\":5},\\"end\\":{\\"line\\":8,\\"column\\":9}},\\"name\\":\\"name\\"}},{\\"start\\":111,\\"end\\":120,\\"type\\":\\"Text\\",\\"raw\\":\\" clicks: \\",\\"data\\":\\" clicks: \\"},{\\"start\\":120,\\"end\\":128,\\"type\\":\\"MustacheTag\\",\\"expression\\":{\\"type\\":\\"Identifier\\",\\"start\\":121,\\"end\\":127,\\"loc\\":{\\"start\\":{\\"line\\":8,\\"column\\":20},\\"end\\":{\\"line\\":8,\\"column\\":26}},\\"name\\":\\"clicks\\"}}]},{\\"start\\":138,\\"end\\":140,\\"type\\":\\"Text\\",\\"raw\\":\\"\\\\n\\\\n\\",\\"data\\":\\"\\\\n\\\\n\\"}]},\\"css\\":{\\"type\\":\\"Style\\",\\"start\\":140,\\"end\\":195,\\"attributes\\":[{\\"start\\":147,\\"end\\":158,\\"type\\":\\"Attribute\\",\\"name\\":\\"lang\\",\\"value\\":[{\\"start\\":153,\\"end\\":157,\\"type\\":\\"Text\\",\\"raw\\":\\"scss\\",\\"data\\":\\"scss\\"}]}],\\"children\\":[{\\"type\\":\\"Rule\\",\\"prelude\\":{\\"type\\":\\"SelectorList\\",\\"children\\":[{\\"type\\":\\"Selector\\",\\"children\\":[{\\"type\\":\\"TypeSelector\\",\\"name\\":\\"button\\",\\"start\\":159,\\"end\\":165}],\\"start\\":159,\\"end\\":165}],\\"start\\":159,\\"end\\":165},\\"block\\":{\\"type\\":\\"Block\\",\\"children\\":[{\\"type\\":\\"Declaration\\",\\"important\\":false,\\"property\\":\\"color\\",\\"value\\":{\\"type\\":\\"Value\\",\\"children\\":[{\\"type\\":\\"Hash\\",\\"value\\":\\"000099\\",\\"start\\":177,\\"end\\":184}],\\"start\\":177,\\"end\\":184},\\"start\\":170,\\"end\\":184}],\\"start\\":166,\\"end\\":187},\\"start\\":159,\\"end\\":187}],\\"content\\":{\\"start\\":159,\\"end\\":187,\\"styles\\":\\"button {\\\\n  color: #000099;\\\\n}\\"}},\\"instance\\":{\\"type\\":\\"Script\\",\\"start\\":0,\\"end\\":60,\\"context\\":\\"default\\",\\"content\\":{\\"type\\":\\"Program\\",\\"start\\":18,\\"end\\":51,\\"loc\\":{\\"start\\":{\\"line\\":1,\\"column\\":0},\\"end\\":{\\"line\\":3,\\"column\\":0}},\\"body\\":[{\\"type\\":\\"ExportNamedDeclaration\\",\\"start\\":18,\\"end\\":34,\\"loc\\":{\\"start\\":{\\"line\\":1,\\"column\\":18},\\"end\\":{\\"line\\":1,\\"column\\":34}},\\"declaration\\":{\\"type\\":\\"VariableDeclaration\\",\\"start\\":25,\\"end\\":34,\\"loc\\":{\\"start\\":{\\"line\\":1,\\"column\\":25},\\"end\\":{\\"line\\":1,\\"column\\":34}},\\"declarations\\":[{\\"type\\":\\"VariableDeclarator\\",\\"start\\":29,\\"end\\":33,\\"loc\\":{\\"start\\":{\\"line\\":1,\\"column\\":29},\\"end\\":{\\"line\\":1,\\"column\\":33}},\\"id\\":{\\"type\\":\\"Identifier\\",\\"start\\":29,\\"end\\":33,\\"loc\\":{\\"start\\":{\\"line\\":1,\\"column\\":29},\\"end\\":{\\"line\\":1,\\"column\\":33}},\\"name\\":\\"name\\"},\\"init\\":null}],\\"kind\\":\\"let\\"},\\"specifiers\\":[],\\"source\\":null},{\\"type\\":\\"VariableDeclaration\\",\\"start\\":35,\\"end\\":50,\\"loc\\":{\\"start\\":{\\"line\\":2,\\"column\\":0},\\"end\\":{\\"line\\":2,\\"column\\":15}},\\"declarations\\":[{\\"type\\":\\"VariableDeclarator\\",\\"start\\":39,\\"end\\":49,\\"loc\\":{\\"start\\":{\\"line\\":2,\\"column\\":4},\\"end\\":{\\"line\\":2,\\"column\\":14}},\\"id\\":{\\"type\\":\\"Identifier\\",\\"start\\":39,\\"end\\":45,\\"loc\\":{\\"start\\":{\\"line\\":2,\\"column\\":4},\\"end\\":{\\"line\\":2,\\"column\\":10}},\\"name\\":\\"clicks\\"},\\"init\\":{\\"type\\":\\"Literal\\",\\"start\\":48,\\"end\\":49,\\"loc\\":{\\"start\\":{\\"line\\":2,\\"column\\":13},\\"end\\":{\\"line\\":2,\\"column\\":14}},\\"value\\":0,\\"raw\\":\\"0\\"}}],\\"kind\\":\\"let\\"}],\\"sourceType\\":\\"module\\"}}}
export const css={\\"code\\":\\"button.svelte-d8vj6a{color:#000099}\\",\\"map\\":null}
export const dependencies=[]
export const js={\\"code\\":\\"/* src/Dummy.svelte generated by Svelte vXXX */\\\\nimport {\\\\n\\\\tSvelteComponent as SvelteComponent$,\\\\n\\\\tappend as append$,\\\\n\\\\tattr as attr$,\\\\n\\\\tdetach as detach$,\\\\n\\\\telement as element$,\\\\n\\\\tinit as init$,\\\\n\\\\tinsert as insert$,\\\\n\\\\tlisten as listen$,\\\\n\\\\tnoop as noop$,\\\\n\\\\tsafe_not_equal as safe_not_equal$,\\\\n\\\\tset_data as set_data$,\\\\n\\\\ttext as text$\\\\n} from \\\\\\"svelte/internal\\\\\\";\\\\n\\\\nfunction create_fragment(ctx) {\\\\n\\\\tlet button$;\\\\n\\\\tlet t0$;\\\\n\\\\tlet t1$;\\\\n\\\\tlet t2$;\\\\n\\\\tlet mounted;\\\\n\\\\tlet dispose;\\\\n\\\\n\\\\treturn {\\\\n\\\\t\\\\tc() {\\\\n\\\\t\\\\t\\\\tbutton$ = element$(\\\\\\"button\\\\\\");\\\\n\\\\t\\\\t\\\\tt0$ = text$(/*name*/ ctx[0]);\\\\n\\\\t\\\\t\\\\tt1$ = text$(\\\\\\" clicks: \\\\\\");\\\\n\\\\t\\\\t\\\\tt2$ = text$(/*clicks*/ ctx[1]);\\\\n\\\\t\\\\t\\\\tattr$(button$, \\\\\\"class\\\\\\", \\\\\\"svelte-d8vj6a\\\\\\");\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\tm(target, anchor) {\\\\n\\\\t\\\\t\\\\tinsert$(target, button$, anchor);\\\\n\\\\t\\\\t\\\\tappend$(button$, t0$);\\\\n\\\\t\\\\t\\\\tappend$(button$, t1$);\\\\n\\\\t\\\\t\\\\tappend$(button$, t2$);\\\\n\\\\n\\\\t\\\\t\\\\tif (!mounted) {\\\\n\\\\t\\\\t\\\\t\\\\tdispose = listen$(button$, \\\\\\"click\\\\\\", /*click_handler$*/ ctx[2]);\\\\n\\\\t\\\\t\\\\t\\\\tmounted = true;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\tp(ctx, [dirty]) {\\\\n\\\\t\\\\t\\\\tif (dirty & /*name*/ 1) set_data$(t0$, /*name*/ ctx[0]);\\\\n\\\\t\\\\t\\\\tif (dirty & /*clicks*/ 2) set_data$(t2$, /*clicks*/ ctx[1]);\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\ti: noop$,\\\\n\\\\t\\\\to: noop$,\\\\n\\\\t\\\\td(detaching) {\\\\n\\\\t\\\\t\\\\tif (detaching) detach$(button$);\\\\n\\\\t\\\\t\\\\tmounted = false;\\\\n\\\\t\\\\t\\\\tdispose();\\\\n\\\\t\\\\t}\\\\n\\\\t};\\\\n}\\\\n\\\\nfunction instance$($$self, $$props, $$invalidate) {\\\\n\\\\tlet { name } = $$props;\\\\n\\\\tlet clicks = 0;\\\\n\\\\n\\\\tconst click_handler$ = () => {\\\\n\\\\t\\\\t$$invalidate(1, clicks++, clicks);\\\\n\\\\t};\\\\n\\\\n\\\\t$$self.$$set = $$props => {\\\\n\\\\t\\\\tif ('name' in $$props) $$invalidate(0, name = $$props.name);\\\\n\\\\t};\\\\n\\\\n\\\\treturn [name, clicks, click_handler$];\\\\n}\\\\n\\\\nclass Dummy$ extends SvelteComponent$ {\\\\n\\\\tconstructor(options) {\\\\n\\\\t\\\\tsuper();\\\\n\\\\t\\\\tinit$(this, options, instance$, create_fragment, safe_not_equal$, { name: 0 });\\\\n\\\\t}\\\\n}\\\\n\\\\nexport default Dummy$;\\",\\"map\\":null}
export const lang=\\"ts\\"
export const normalizedFilename=\\"/src/Dummy.svelte\\"
export const preprocessed={\\"code\\":\\"<script lang=\\\\\\"ts\\\\\\">export let name;\\\\nlet clicks = 0;\\\\n</script>\\\\n\\\\n<button\\\\n\\\\ton:click={() => {\\\\n\\\\t\\\\tclicks++;\\\\n\\\\t}}>{name} clicks: {clicks}</button\\\\n>\\\\n\\\\n<style lang=\\\\\\"scss\\\\\\">button {\\\\n  color: #000099;\\\\n}</style>\\\\n\\",\\"dependencies\\":[],\\"map\\":{\\"version\\":3,\\"mappings\\":\\"AAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CACT,MAAA,CAAA,GAAA,CAAI,IAAA;AACX,GAAA,CAAI,MAAA,CAAA,CAAA,CAAS,CAAA;AACd,CAAC,CAAC,MAAM;;AAER,CAAC;AACD,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,MAAM,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AAC7B;;AAEA,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;;CAKlB,CAAC,CAAC,KAAK;\\",\\"names\\":[],\\"sources\\":[\\"Dummy.svelte\\"]}}
export const source=\\"<script lang=\\\\\\"ts\\\\\\">\\\\n\\\\texport let name: string;\\\\n\\\\tlet clicks = 0;\\\\n</script>\\\\n\\\\n<button\\\\n\\\\ton:click={() => {\\\\n\\\\t\\\\tclicks++;\\\\n\\\\t}}>{name} clicks: {clicks}</button\\\\n>\\\\n\\\\n<style lang=\\\\\\"scss\\\\\\">\\\\n\\\\t$blue: blue;\\\\n\\\\tbutton {\\\\n\\\\t\\\\tcolor: darken($blue, 20);\\\\n\\\\t}\\\\n</style>\\\\n\\"
export const ssr=false
export const stats={\\"timings\\":{\\"total\\":0.123456789,\\"parse\\":{\\"total\\":0.123456789},\\"create component\\":{\\"total\\":0.123456789}}}
export const vars=[{\\"name\\":\\"name\\",\\"export_name\\":\\"name\\",\\"injected\\":false,\\"module\\":false,\\"mutated\\":false,\\"reassigned\\":false,\\"referenced\\":true,\\"writable\\":true,\\"referenced_from_script\\":false},{\\"name\\":\\"clicks\\",\\"export_name\\":null,\\"injected\\":false,\\"module\\":false,\\"mutated\\":false,\\"reassigned\\":true,\\"referenced\\":true,\\"writable\\":true,\\"referenced_from_script\\":false}]
export const warnings=[]
"
`;

exports[`raw > mixed exports > Dummy.svelte?raw&svelte&type=preprocessed 1`] = `
"export const code=\\"<script lang=\\\\\\"ts\\\\\\">export let name;\\\\nlet clicks = 0;\\\\n</script>\\\\n\\\\n<button\\\\n\\\\ton:click={() => {\\\\n\\\\t\\\\tclicks++;\\\\n\\\\t}}>{name} clicks: {clicks}</button\\\\n>\\\\n\\\\n<style lang=\\\\\\"scss\\\\\\">button {\\\\n  color: #000099;\\\\n}</style>\\\\n\\"
export const dependencies=[]
export const map={\\"version\\":3,\\"mappings\\":\\"AAAA,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CACT,MAAA,CAAA,GAAA,CAAI,IAAA;AACX,GAAA,CAAI,MAAA,CAAA,CAAA,CAAS,CAAA;AACd,CAAC,CAAC,MAAM;;AAER,CAAC;AACD,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,EAAE,MAAM,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AAC7B;;AAEA,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;;CAKlB,CAAC,CAAC,KAAK;\\",\\"names\\":[],\\"sources\\":[\\"Dummy.svelte\\"]}
export default code
"
`;

exports[`raw > mixed exports > Dummy.svelte?raw&svelte&type=script 1`] = `
"export const code=\\"/* src/Dummy.svelte generated by Svelte vXXX */\\\\nimport {\\\\n\\\\tSvelteComponent as SvelteComponent$,\\\\n\\\\tappend as append$,\\\\n\\\\tattr as attr$,\\\\n\\\\tdetach as detach$,\\\\n\\\\telement as element$,\\\\n\\\\tinit as init$,\\\\n\\\\tinsert as insert$,\\\\n\\\\tlisten as listen$,\\\\n\\\\tnoop as noop$,\\\\n\\\\tsafe_not_equal as safe_not_equal$,\\\\n\\\\tset_data as set_data$,\\\\n\\\\ttext as text$\\\\n} from \\\\\\"svelte/internal\\\\\\";\\\\n\\\\nfunction create_fragment(ctx) {\\\\n\\\\tlet button$;\\\\n\\\\tlet t0$;\\\\n\\\\tlet t1$;\\\\n\\\\tlet t2$;\\\\n\\\\tlet mounted;\\\\n\\\\tlet dispose;\\\\n\\\\n\\\\treturn {\\\\n\\\\t\\\\tc() {\\\\n\\\\t\\\\t\\\\tbutton$ = element$(\\\\\\"button\\\\\\");\\\\n\\\\t\\\\t\\\\tt0$ = text$(/*name*/ ctx[0]);\\\\n\\\\t\\\\t\\\\tt1$ = text$(\\\\\\" clicks: \\\\\\");\\\\n\\\\t\\\\t\\\\tt2$ = text$(/*clicks*/ ctx[1]);\\\\n\\\\t\\\\t\\\\tattr$(button$, \\\\\\"class\\\\\\", \\\\\\"svelte-d8vj6a\\\\\\");\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\tm(target, anchor) {\\\\n\\\\t\\\\t\\\\tinsert$(target, button$, anchor);\\\\n\\\\t\\\\t\\\\tappend$(button$, t0$);\\\\n\\\\t\\\\t\\\\tappend$(button$, t1$);\\\\n\\\\t\\\\t\\\\tappend$(button$, t2$);\\\\n\\\\n\\\\t\\\\t\\\\tif (!mounted) {\\\\n\\\\t\\\\t\\\\t\\\\tdispose = listen$(button$, \\\\\\"click\\\\\\", /*click_handler$*/ ctx[2]);\\\\n\\\\t\\\\t\\\\t\\\\tmounted = true;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\tp(ctx, [dirty]) {\\\\n\\\\t\\\\t\\\\tif (dirty & /*name*/ 1) set_data$(t0$, /*name*/ ctx[0]);\\\\n\\\\t\\\\t\\\\tif (dirty & /*clicks*/ 2) set_data$(t2$, /*clicks*/ ctx[1]);\\\\n\\\\t\\\\t},\\\\n\\\\t\\\\ti: noop$,\\\\n\\\\t\\\\to: noop$,\\\\n\\\\t\\\\td(detaching) {\\\\n\\\\t\\\\t\\\\tif (detaching) detach$(button$);\\\\n\\\\t\\\\t\\\\tmounted = false;\\\\n\\\\t\\\\t\\\\tdispose();\\\\n\\\\t\\\\t}\\\\n\\\\t};\\\\n}\\\\n\\\\nfunction instance$($$self, $$props, $$invalidate) {\\\\n\\\\tlet { name } = $$props;\\\\n\\\\tlet clicks = 0;\\\\n\\\\n\\\\tconst click_handler$ = () => {\\\\n\\\\t\\\\t$$invalidate(1, clicks++, clicks);\\\\n\\\\t};\\\\n\\\\n\\\\t$$self.$$set = $$props => {\\\\n\\\\t\\\\tif ('name' in $$props) $$invalidate(0, name = $$props.name);\\\\n\\\\t};\\\\n\\\\n\\\\treturn [name, clicks, click_handler$];\\\\n}\\\\n\\\\nclass Dummy$ extends SvelteComponent$ {\\\\n\\\\tconstructor(options) {\\\\n\\\\t\\\\tsuper();\\\\n\\\\t\\\\tinit$(this, options, instance$, create_fragment, safe_not_equal$, { name: 0 });\\\\n\\\\t}\\\\n}\\\\n\\\\nexport default Dummy$;\\"
export const map=null
export default code
"
`;

exports[`raw > mixed exports > Dummy.svelte?raw&svelte&type=style 1`] = `
"export const code=\\"button.svelte-d8vj6a{color:#000099}\\"
export const map=null
export default code
"
`;

exports[`ssrLoadModule > ?raw 1`] = `
"<script lang=\\"ts\\">
	export let name: string;
	let clicks = 0;
</script>

<button
	on:click={() => {
		clicks++;
	}}>{name} clicks: {clicks}</button
>

<style lang=\\"scss\\">
	$blue: blue;
	button {
		color: darken($blue, 20);
	}
</style>
"
`;

exports[`ssrLoadModule > ?raw&svelte&type=preprocessed 1`] = `
"<script lang=\\"ts\\">export let name;
let clicks = 0;
</script>

<button
	on:click={() => {
		clicks++;
	}}>{name} clicks: {clicks}</button
>

<style lang=\\"scss\\">button {
  color: #000099;
}</style>
"
`;

exports[`ssrLoadModule > ?raw&svelte&type=script 1`] = `
"/* src/Dummy.svelte generated by Svelte vXXX */
import {
	SvelteComponent as SvelteComponent$,
	append as append$,
	attr as attr$,
	detach as detach$,
	element as element$,
	init as init$,
	insert as insert$,
	listen as listen$,
	noop as noop$,
	safe_not_equal as safe_not_equal$,
	set_data as set_data$,
	text as text$
} from \\"svelte/internal\\";

function create_fragment(ctx) {
	let button$;
	let t0$;
	let t1$;
	let t2$;
	let mounted;
	let dispose;

	return {
		c() {
			button$ = element$(\\"button\\");
			t0$ = text$(/*name*/ ctx[0]);
			t1$ = text$(\\" clicks: \\");
			t2$ = text$(/*clicks*/ ctx[1]);
			attr$(button$, \\"class\\", \\"svelte-d8vj6a\\");
		},
		m(target, anchor) {
			insert$(target, button$, anchor);
			append$(button$, t0$);
			append$(button$, t1$);
			append$(button$, t2$);

			if (!mounted) {
				dispose = listen$(button$, \\"click\\", /*click_handler$*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data$(t0$, /*name*/ ctx[0]);
			if (dirty & /*clicks*/ 2) set_data$(t2$, /*clicks*/ ctx[1]);
		},
		i: noop$,
		o: noop$,
		d(detaching) {
			if (detaching) detach$(button$);
			mounted = false;
			dispose();
		}
	};
}

function instance$($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let clicks = 0;

	const click_handler$ = () => {
		$$invalidate(1, clicks++, clicks);
	};

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, clicks, click_handler$];
}

class Dummy$ extends SvelteComponent$ {
	constructor(options) {
		super();
		init$(this, options, instance$, create_fragment, safe_not_equal$, { name: 0 });
	}
}

export default Dummy$;"
`;

exports[`ssrLoadModule > ?raw&svelte&type=script&compilerOptions={"customElement":true} 1`] = `
"/* src/Dummy.svelte generated by Svelte vXXX */
import {
	SvelteElement as SvelteElement$,
	append as append$,
	attribute_to_object as attribute_to_object$,
	detach as detach$,
	element as element$,
	flush as flush$,
	init as init$,
	insert as insert$,
	listen as listen$,
	noop as noop$,
	safe_not_equal as safe_not_equal$,
	set_data as set_data$,
	text as text$
} from \\"svelte/internal\\";

function create_fragment(ctx) {
	let button$;
	let t0$;
	let t1$;
	let t2$;
	let mounted;
	let dispose;

	return {
		c() {
			button$ = element$(\\"button\\");
			t0$ = text$(/*name*/ ctx[0]);
			t1$ = text$(\\" clicks: \\");
			t2$ = text$(/*clicks*/ ctx[1]);
			this.c = noop$;
		},
		m(target, anchor) {
			insert$(target, button$, anchor);
			append$(button$, t0$);
			append$(button$, t1$);
			append$(button$, t2$);

			if (!mounted) {
				dispose = listen$(button$, \\"click\\", /*click_handler$*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data$(t0$, /*name*/ ctx[0]);
			if (dirty & /*clicks*/ 2) set_data$(t2$, /*clicks*/ ctx[1]);
		},
		i: noop$,
		o: noop$,
		d(detaching) {
			if (detaching) detach$(button$);
			mounted = false;
			dispose();
		}
	};
}

function instance$($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let clicks = 0;

	const click_handler$ = () => {
		$$invalidate(1, clicks++, clicks);
	};

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, clicks, click_handler$];
}

class Dummy$ extends SvelteElement$ {
	constructor(options) {
		super();
		const style = document.createElement('style');
		style.textContent = \`button{color:#000099}\`;
		this.shadowRoot.appendChild(style);

		init$(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object$(this.attributes),
				customElement: true
			},
			instance$,
			create_fragment,
			safe_not_equal$,
			{ name: 0 },
			null
		);

		if (options) {
			if (options.target) {
				insert$(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush$();
			}
		}
	}

	static get observedAttributes() {
		return [\\"name\\"];
	}

	get name() {
		return this.$$.ctx[0];
	}

	set name(name) {
		this.$$set({ name });
		flush$();
	}
}

export default Dummy$;"
`;

exports[`ssrLoadModule > ?raw&svelte&type=style 1`] = `"button.svelte-d8vj6a{color:#000099}"`;
