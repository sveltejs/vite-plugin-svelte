export const code="/* src/Dummy.svelte generated by Svelte vXXX */\nimport {\n\tSvelteComponent,\n\tappend,\n\tattr,\n\tdetach,\n\telement,\n\tinit,\n\tinsert,\n\tlisten,\n\tnoop,\n\tsafe_not_equal,\n\tset_data,\n\ttext\n} from \"svelte/internal\";\n\nimport \"svelte/internal/disclose-version\";\n\nfunction create_fragment(ctx) {\n\tlet button;\n\tlet t0;\n\tlet t1;\n\tlet t2;\n\tlet mounted;\n\tlet dispose;\n\n\treturn {\n\t\tc() {\n\t\t\tbutton = element(\"button\");\n\t\t\tt0 = text(/*name*/ ctx[0]);\n\t\t\tt1 = text(\" clicks: \");\n\t\t\tt2 = text(/*clicks*/ ctx[1]);\n\t\t\tattr(button, \"class\", \"svelte-d8vj6a\");\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tinsert(target, button, anchor);\n\t\t\tappend(button, t0);\n\t\t\tappend(button, t1);\n\t\t\tappend(button, t2);\n\n\t\t\tif (!mounted) {\n\t\t\t\tdispose = listen(button, \"click\", /*click_handler*/ ctx[2]);\n\t\t\t\tmounted = true;\n\t\t\t}\n\t\t},\n\t\tp(ctx, [dirty]) {\n\t\t\tif (dirty & /*name*/ 1) set_data(t0, /*name*/ ctx[0]);\n\t\t\tif (dirty & /*clicks*/ 2) set_data(t2, /*clicks*/ ctx[1]);\n\t\t},\n\t\ti: noop,\n\t\to: noop,\n\t\td(detaching) {\n\t\t\tif (detaching) {\n\t\t\t\tdetach(button);\n\t\t\t}\n\n\t\t\tmounted = false;\n\t\t\tdispose();\n\t\t}\n\t};\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n\tlet { name } = $$props;\n\tlet clicks = 0;\n\n\tconst click_handler = () => {\n\t\t$$invalidate(1, clicks++, clicks);\n\t};\n\n\t$$self.$$set = $$props => {\n\t\tif ('name' in $$props) $$invalidate(0, name = $$props.name);\n\t};\n\n\treturn [name, clicks, click_handler];\n}\n\nclass Dummy extends SvelteComponent {\n\tconstructor(options) {\n\t\tsuper();\n\t\tinit(this, options, instance, create_fragment, safe_not_equal, { name: 0 });\n\t}\n}\n\nexport default Dummy;"
export const map=null
export default code
