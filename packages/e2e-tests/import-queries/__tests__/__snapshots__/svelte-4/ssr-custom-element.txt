/* src/Dummy.svelte generated by Svelte vXXX */
import {
	SvelteComponent,
	append,
	append_styles,
	attr,
	create_custom_element,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	text
} from "svelte/internal";

import "svelte/internal/disclose-version";

function add_css(target) {
	append_styles(target, "svelte-d8vj6a", "button.svelte-d8vj6a{color:#000099}");
}

function create_fragment(ctx) {
	let button;
	let t0;
	let t1;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			t0 = text(/*name*/ ctx[0]);
			t1 = text(" clicks: ");
			t2 = text(/*clicks*/ ctx[1]);
			attr(button, "class", "svelte-d8vj6a");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t0);
			append(button, t1);
			append(button, t2);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data(t0, /*name*/ ctx[0]);
			if (dirty & /*clicks*/ 2) set_data(t2, /*clicks*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(button);
			}

			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let clicks = 0;

	const click_handler = () => {
		$$invalidate(1, clicks++, clicks);
	};

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, clicks, click_handler];
}

class Dummy extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0 }, add_css);
	}

	get name() {
		return this.$$.ctx[0];
	}

	set name(name) {
		this.$$set({ name });
		flush();
	}
}

create_custom_element(Dummy, {"name":{}}, [], [], true);
export default Dummy;